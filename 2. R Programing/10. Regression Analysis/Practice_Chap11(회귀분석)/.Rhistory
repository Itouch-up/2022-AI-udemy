cars
plot(dist~speed, data = cars)
model <- lm(dist~speed, data = cars)
model
abline(model)
class(model)
dim(model)
summary(model)
coef(model)[1]    # b값
coef(model)[2]    # W값
b <- coef(model)[1]
W <- coef(model)[2]
cars
speed <- 25
dist <- W*speed + b
dist
speed <- 50
dist <- W*speed + b
dist
speed <- 100
dist <- W*speed + b
dist
speed <- cars[,1]
speed
pred <- W * speed + b
pred
compare <- data.frame(pred, cars[,2], pred-cars[,2])
colnames(compare) <- c("예상치", "실제값", "오차값")
compare
state.x77
model <- lm(formula = Murder~Illiteracy, data = data.frame(state.x77))
plot(Murder~Illiteracy, data = data.frame(state.x77))
abline(model)
summary(model)
coef(model)[1]
coef(model)[2]  # b값
Murder = 4.2575 * Illiteracy + 2.3968
Murder = 4.2575 * state.x77$Illiteracy + 2.3968
state <- data.frame(state.x77)
Murder = 4.2575 * state$Illiteracy + 2.3968
Murder = 4.2575 * Illiteracy + 2.3968
Illiteracy <- 0.5
Murder = 4.2575 * Illiteracy + 2.3968
Murder
Illiteracy <- 1.0
Murder = 4.2575 * Illiteracy + 2.3968
Murder
Illiteracy <- 1.5
Murder = 4.2575 * Illiteracy + 2.3968
Murder
state.x77
trees
class(trees)
plot(Volume~Girth, data = trees)
model <- lm(formula = Volume~Girth, data = trees)
abline(model)
summary(model)
coef(model)[1]  # b값
coef(model)[2]  # W값
Volume <- 5.0659 * Girth - 36.9435
Girth <- 8.5
Volume <- 5.0659 * Girth - 36.9435
Volume
trees
Girth <- 9.0
Volume <- 5.0659 * Girth - 36.9435
Volume
Girth <- 9.5
Volume <- 5.0659 * Girth - 36.9435
Volume
Girth <- 10.5
Volume <- 5.0659 * Girth - 36.9435
Volume
install.packages("cars")
install.packages("car")
library(car)
head(Prestige)
install.packages("car")
library(car)
newdata <- Prestige[,c(1:4)] 		# 회귀식 작성을 위한 데이터 준비
plot(newdata, pch=16, col="blue", 	# 산점도를 통해 변수 간 관계 확인
plot(newdata, pch=16, col="blue", 	# 산점도를 통해 변수 간 관계 확인
main="Matrix Scatterplot")
plot(newdata, pch=16, col="blue", 	# 산점도를 통해 변수 간 관계 확인
main="Matrix Scatterplot")
plot(newdata, pch=16, col="blue",
main="Matrix Scatterplot")
mod1 <- lm(income ~ education + prestige + # 회귀식 도출
women, data=newdata)
summary(mod1)
library(MASS) 		# stepAIC( ) 함수 제공
newdata2 <- Prestige[,c(1:5)] # 모델 구축에 사용할 데이터셋 생성
head(newdata2)
mod2 <- lm(income ~ education + prestige +
women + census, data= newdata2)
mod3 <- stepAIC(mod2) 	# 변수 선택 진행
summary(mod3) 		# 회귀모델 상세 내용 확인
library(car)
head(Prestige)
class(Prestige)
newdata <- Prestige[,c(1:4)]
plot(newdata, pch=16, col="blue", main="Matrix Scatterplot")
mod1 <- lm(income ~ education + prestige + women, data = newdata)
summary(mod1)
library(MASS)
newdata2 <- Prestige[,c(1:5)]
head(newdata2)
mod2 <- lm(income ~ .,data = newdata2)
mod3 <- stepAIC(mod2)
mod3
summary(mod3)
dim(newdata2)
head(newdata2)
women1 <- 11.16
prestige1 <- 68.8
income1 <- 431.574 - (48.385*women1) + (165.875*prestige1)
income1
women2 <- 5.13
prestige2 <- 77.6
income2 <- 431.574 - (48.385*women2) + (165.875*prestige2)
income2
library(mlbench)
data("BostonHousing")
head(BostonHousing)
ds <- BostonHousing[,-4]
head(ds)
mod <- lm(medv ~ .,data = ds)
summary(mod)
medv = 36.891960
-0.113139 * crim
+0.047052 * zn
+0.040311 * indus
-17.366999 * nox
+3.850492 * rm
+0.002784 * age
-1.485374 * dis
+0.328311 * rad
-0.013756 * tax
-0.990958 * ptratio
+0.009741 * b
-0.534158 * lstat
medv = 36.891960
-0.113139 * ds$crim
+0.047052 * ds$zn
+0.040311 * ds$indus
-17.366999 * ds$nox
+3.850492 * ds$rm
+0.002784 * ds$age
-1.485374 * ds$dis
+0.328311 * ds$rad
-0.013756 * ds$tax
-0.990958 * ds$ptratio
+0.009741 * ds$b
-0.534158 * ds$lstat
mod2 <- stepAIC(mod)
summary(mod2)
medv = 36.620311
-0.114056 * ds$crim
+0.045742 * ds$zn
-16.469153 * ds$nox
+3.844639 * ds$rm
-1.526099 * ds$dis
+0.315531 * ds$rad
-0.012674 * ds$tax
-0.978442 * ds$ptratio
+0.009730 * ds$b
-0.528103 * ds$lstat
summary(mod)
summary(mod2)
iris.new <- iris
iris.new$Species <- as.integer(iris.new$Species) 	# 범주형 자료를 정수로 변환
head(iris.new)
mod.iris <- glm(Species ~., data= iris.new) 	# 로지스틱 회귀모델 도출
summary(mod.iris) 				# 회귀모델의 상세 내용 확인
unknown <- data.frame(rbind(c(5.1, 3.5, 1.4, 0.2)))
names(unknown) <- names(iris)[1:4]
unknown 					# 예측 대상 데이터
pred <- predict(mod.iris, unknown)
pred 					# 예측 결과 출력
class(pred)
round(pred,0) 		# 예측 결과 출력(소수 첫째 자리에서 반올림)
pred <- round(pred,0)
pred
levels(iris$Species)
levels(iris$Species)[pred]
test <- iris[,1:4] 			# 예측 대상 데이터 준비
pred <- predict(mod.iris, test) 		# 모델을 이용한 예측
pred <- round(pred,0)
pred 				# 예측 결과 출력
answer <- as.integer(iris$Species) 	# 실제 품종 정보
pred == answer 			# 예측 품종과 실제 품종이 같은지 비교
acc <- mean(pred == answer) 		# 예측 정확도 계산
acc 				# 예측 정확도 출력
iris.new <- iris
iris.new <- iris
iris.new$Species <- as.integer(iris.new$Species)
head(iris.new)
mod.iris <- glm(Species ~ ., data = iris.new)
summary(mod.iris)
unknown <- data.frame(rbind(c(5.1,3.5,1.4,0.2))) #예측대상데이터
unknown
names(unknown) <- names(iris)[1:4]
unknown
pred <- predict(mod.iris, unknown)
pred
round(pred, 0)
pred <- round(pred, 0)
pred
levels(iris$Species)
levels(iris$Species)[pred]
test <- iris[,1:4]
test
pred <- predict(mod.iris, test)
pred <- round(pred, 0)
answer <- as.integer(iris$Species)
pred == answer
147/150
acc <- mean(pred == answer)  # 150/150 = 100%, 147/150=98%
acc
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
mydata
mod <- glm(admit~gre+gpa+rank,data=mydata)
summary(mod)
pred <- predict(mod,mydata[,c('gre','gpa','rank')])
pred <- round(pred,0)
result <- data.frame(예측값=pred, 정답=mydata$admit)
result
acc <- mean(result$예측값==result$정답)
acc
Glass
library(mlbench)
data(Glass)
Glass
levels(Glass$Type)
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
dim(mydata)
class(mydata)
head(mydata)
mod <- glm(admit ~ ., data = mydata)
summary(mod)
head(mydata)
pred <- predict(mod, mydata[,c("gre","gpa","rank")])
pred
round(pred, 0)
pred <- round(pred, 0)
pred
result <- data.frame(예측값=pred, 실제값=mydata$admit)
result
acc <- mean(result$예측값 == result$실제값)
acc
